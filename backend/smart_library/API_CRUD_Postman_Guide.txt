======================================================================
SMART LIBRARY - POSTMAN CRUD GUIDE
======================================================================

Base URL (dev): http://localhost:8000
Default headers:
  Authorization: Token <your_token_here>
  Content-Type: application/json   (switch to multipart/form-data for uploads)

----------------------------------------------------------------------
1. AUTHENTICATION
----------------------------------------------------------------------
Create user
  POST /api/users/
  Body (JSON):
  {
    "email": "amine@example.com",
    "password": "Sup3rPass!",
    "name": "Amine El Achker",
    "role": "admin",
    "is_active": true,
    "is_staff": true
  }

Login (returns token)
  POST /api/auth/login/
  {
    "email": "amine@example.com",
    "password": "123456"
  }

Logout (invalidates token)
  POST /api/auth/logout/
  Header: Authorization: Token <token>

----------------------------------------------------------------------
2. TAG
----------------------------------------------------------------------
Create
  POST /api/tags/
  { "name": "Intelligence Artificielle" }

List
  GET /api/tags/

Retrieve
  GET /api/tags/<id>/

Update
  PATCH /api/tags/<id>/
  { "name": "IA" }

Delete
  DELETE /api/tags/<id>/

----------------------------------------------------------------------
3. DOCUMENT (Upload + OCR + Qdrant indexing)
----------------------------------------------------------------------
Requirements: authenticated user (owner is set automatically) and optional tag ID.

Create (runs full pipeline)
  POST /api/documents/
  Body type: form-data
    file      | File | choose your PDF/JPG/PNG
    title     | Text | "NLP Guide"
    tag       | Text | 1        (optional)
    source    | Text | "personal" or "general"
    language  | Text | "fr"
  Response: 201 + JSON with status moving from uploaded -> processed -> indexed once Qdrant is filled.

List
  GET /api/documents/

Retrieve
  GET /api/documents/<uuid>/

Update metadata only
  PATCH /api/documents/<uuid>/
  { "title": "Updated title" }

Replace the file and re-run pipeline
  PATCH /api/documents/<uuid>/  (multipart form-data with new `file`)

Manually re-run OCR + embeddings without changing file
  POST /api/documents/<uuid>/reprocess/

Fetch indexed chunks for a document
  GET /api/documents/<uuid>/chunks/
  â†’ Returns an array of objects with document metadata + `chunk_index`, `page_number`, `text`.

Delete
  DELETE /api/documents/<uuid>/

----------------------------------------------------------------------
4. FAVORITE
----------------------------------------------------------------------
Create
  POST /api/favorites/
  {
    "user": "uuid-of-user",
    "document": "uuid-of-document"
  }

List
  GET /api/favorites/

Retrieve
  GET /api/favorites/<id>/

Update
  PATCH /api/favorites/<id>/
  { "document": "uuid-of-another-document" }

Delete
  DELETE /api/favorites/<id>/

----------------------------------------------------------------------
5. CONVERSATION
----------------------------------------------------------------------
Create
  POST /api/conversations/
  {
    "user": "uuid-of-user",
    "title": "Support session",
    "mode": "mixed",
    "is_active": true
  }

List
  GET /api/conversations/

Retrieve
  GET /api/conversations/<uuid>/

Update
  PATCH /api/conversations/<uuid>/
  { "is_active": false }

Delete
  DELETE /api/conversations/<uuid>/

----------------------------------------------------------------------
6. MESSAGE
----------------------------------------------------------------------
Create
  POST /api/messages/
  {
    "conversation": "uuid-of-conversation",
    "sender": "user",
    "content": "Bonjour, j'ai besoin d'aide."
  }

List
  GET /api/messages/

Retrieve
  GET /api/messages/<uuid>/

Update
  PATCH /api/messages/<uuid>/
  { "content": "Update: all good." }

Delete
  DELETE /api/messages/<uuid>/

----------------------------------------------------------------------
7. MESSAGE REFERENCE
----------------------------------------------------------------------
Create
  POST /api/message-references/
  {
    "message": "uuid-of-message",
    "document": "uuid-of-document",
    "source_type": "personal",
    "citation": "Voir section 3.2."
  }

List
  GET /api/message-references/

Retrieve
  GET /api/message-references/<id>/

Update
  PATCH /api/message-references/<id>/
  { "citation": "Updated note." }

Delete
  DELETE /api/message-references/<id>/

----------------------------------------------------------------------
NOTES
----------------------------------------------------------------------
- Run `python manage.py seed_demo` to populate demo data (users, tags, documents, favorites, conversations, messages, references).
- Document processing uploads create OCR text, generate embeddings with SentenceTransformer, and store them in Qdrant with chunk metadata.
- Every endpoint except sign-up/login requires the Authorization header.
- Use PATCH for partial updates; PUT if you want to send the full resource.
